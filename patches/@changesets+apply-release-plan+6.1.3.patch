diff --git a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
index c2e8d2f..0857cfa 100644
--- a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
+++ b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
@@ -214,19 +214,25 @@ async function getChangelogEntry(release, releases, changesets, changelogFuncs,
     if (rls && rls.type !== "none") {
       changelogLines[rls.type].push(changelogFuncs.getReleaseLine(cs, rls.type, changelogOpts));
     }
-  });
+  }); // See patch rationale in https://github.com/blockprotocol/blockprotocol/pull/720
+  // Changes in the `src` folder were written by hand. Files in the `dist` folder
+  // were generated by `yarn build` from the root of the Changesets monororepo and
+  // then copied over to `node_modules`.
+
   let dependentReleases = releases.filter(rel => {
-    var _release$packageJson$, _release$packageJson$2;
+    var _release$packageJson$, _release$packageJson$2, _release$packageJson$3;
 
     const dependencyVersionRange = (_release$packageJson$ = release.packageJson.dependencies) === null || _release$packageJson$ === void 0 ? void 0 : _release$packageJson$[rel.name];
-    const peerDependencyVersionRange = (_release$packageJson$2 = release.packageJson.peerDependencies) === null || _release$packageJson$2 === void 0 ? void 0 : _release$packageJson$2[rel.name];
-    const versionRange = dependencyVersionRange || peerDependencyVersionRange;
+    const devDependencyVersionRange = release.packageJson.name.startsWith("block-template-" // @todo use option from .changeset/config.json instead
+    ) ? (_release$packageJson$2 = release.packageJson.devDependencies) === null || _release$packageJson$2 === void 0 ? void 0 : _release$packageJson$2[rel.name] : undefined;
+    const peerDependencyVersionRange = (_release$packageJson$3 = release.packageJson.peerDependencies) === null || _release$packageJson$3 === void 0 ? void 0 : _release$packageJson$3[rel.name];
+    const versionRange = dependencyVersionRange || devDependencyVersionRange || peerDependencyVersionRange;
     return versionRange && shouldUpdateDependencyBasedOnConfig({
       type: rel.type,
       version: rel.newVersion
     }, {
       depVersionRange: versionRange,
-      depType: dependencyVersionRange ? "dependencies" : "peerDependencies"
+      depType: dependencyVersionRange ? "dependencies" : devDependencyVersionRange ? "devDependencies" : "peerDependencies"
     }, {
       minReleaseType: updateInternalDependencies,
       onlyUpdatePeerDependentsWhenOutOfRange
diff --git a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
index 846b320..3c466ea 100644
--- a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
+++ b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
@@ -117,14 +117,14 @@ async function getChangelogEntry(release, releases, changesets, changelogFuncs,
     rls && "none" !== rls.type && changelogLines[rls.type].push(changelogFuncs.getReleaseLine(cs, rls.type, changelogOpts));
   }));
   let dependentReleases = releases.filter((rel => {
-    var _release$packageJson$, _release$packageJson$2;
-    const dependencyVersionRange = null === (_release$packageJson$ = release.packageJson.dependencies) || void 0 === _release$packageJson$ ? void 0 : _release$packageJson$[rel.name], peerDependencyVersionRange = null === (_release$packageJson$2 = release.packageJson.peerDependencies) || void 0 === _release$packageJson$2 ? void 0 : _release$packageJson$2[rel.name], versionRange = dependencyVersionRange || peerDependencyVersionRange;
+    var _release$packageJson$, _release$packageJson$2, _release$packageJson$3;
+    const dependencyVersionRange = null === (_release$packageJson$ = release.packageJson.dependencies) || void 0 === _release$packageJson$ ? void 0 : _release$packageJson$[rel.name], devDependencyVersionRange = release.packageJson.name.startsWith("block-template-") ? null === (_release$packageJson$2 = release.packageJson.devDependencies) || void 0 === _release$packageJson$2 ? void 0 : _release$packageJson$2[rel.name] : void 0, peerDependencyVersionRange = null === (_release$packageJson$3 = release.packageJson.peerDependencies) || void 0 === _release$packageJson$3 ? void 0 : _release$packageJson$3[rel.name], versionRange = dependencyVersionRange || devDependencyVersionRange || peerDependencyVersionRange;
     return versionRange && shouldUpdateDependencyBasedOnConfig({
       type: rel.type,
       version: rel.newVersion
     }, {
       depVersionRange: versionRange,
-      depType: dependencyVersionRange ? "dependencies" : "peerDependencies"
+      depType: dependencyVersionRange ? "dependencies" : devDependencyVersionRange ? "devDependencies" : "peerDependencies"
     }, {
       minReleaseType: updateInternalDependencies,
       onlyUpdatePeerDependentsWhenOutOfRange: onlyUpdatePeerDependentsWhenOutOfRange
diff --git a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.esm.js b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.esm.js
index 47a42c3..f6bae0b 100644
--- a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.esm.js
+++ b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.esm.js
@@ -199,19 +199,25 @@ async function getChangelogEntry(release, releases, changesets, changelogFuncs,
     if (rls && rls.type !== "none") {
       changelogLines[rls.type].push(changelogFuncs.getReleaseLine(cs, rls.type, changelogOpts));
     }
-  });
+  }); // See patch rationale in https://github.com/blockprotocol/blockprotocol/pull/720
+  // Changes in the `src` folder were written by hand. Files in the `dist` folder
+  // were generated by `yarn build` from the root of the Changesets monororepo and
+  // then copied over to `node_modules`.
+
   let dependentReleases = releases.filter(rel => {
-    var _release$packageJson$, _release$packageJson$2;
+    var _release$packageJson$, _release$packageJson$2, _release$packageJson$3;
 
     const dependencyVersionRange = (_release$packageJson$ = release.packageJson.dependencies) === null || _release$packageJson$ === void 0 ? void 0 : _release$packageJson$[rel.name];
-    const peerDependencyVersionRange = (_release$packageJson$2 = release.packageJson.peerDependencies) === null || _release$packageJson$2 === void 0 ? void 0 : _release$packageJson$2[rel.name];
-    const versionRange = dependencyVersionRange || peerDependencyVersionRange;
+    const devDependencyVersionRange = release.packageJson.name.startsWith("block-template-" // @todo use option from .changeset/config.json instead
+    ) ? (_release$packageJson$2 = release.packageJson.devDependencies) === null || _release$packageJson$2 === void 0 ? void 0 : _release$packageJson$2[rel.name] : undefined;
+    const peerDependencyVersionRange = (_release$packageJson$3 = release.packageJson.peerDependencies) === null || _release$packageJson$3 === void 0 ? void 0 : _release$packageJson$3[rel.name];
+    const versionRange = dependencyVersionRange || devDependencyVersionRange || peerDependencyVersionRange;
     return versionRange && shouldUpdateDependencyBasedOnConfig({
       type: rel.type,
       version: rel.newVersion
     }, {
       depVersionRange: versionRange,
-      depType: dependencyVersionRange ? "dependencies" : "peerDependencies"
+      depType: dependencyVersionRange ? "dependencies" : devDependencyVersionRange ? "devDependencies" : "peerDependencies"
     }, {
       minReleaseType: updateInternalDependencies,
       onlyUpdatePeerDependentsWhenOutOfRange
diff --git a/node_modules/@changesets/apply-release-plan/src/get-changelog-entry.ts b/node_modules/@changesets/apply-release-plan/src/get-changelog-entry.ts
index 1f07982..8cfdfcf 100644
--- a/node_modules/@changesets/apply-release-plan/src/get-changelog-entry.ts
+++ b/node_modules/@changesets/apply-release-plan/src/get-changelog-entry.ts
@@ -56,19 +56,35 @@ export default async function getChangelogEntry(
       );
     }
   });
+  // See patch rationale in https://github.com/blockprotocol/blockprotocol/pull/720
+  // Changes in the `src` folder were written by hand. Files in the `dist` folder
+  // were generated by `yarn build` from the root of the Changesets monororepo and
+  // then copied over to `node_modules`.
   let dependentReleases = releases.filter((rel) => {
     const dependencyVersionRange = release.packageJson.dependencies?.[rel.name];
+    const devDependencyVersionRange = release.packageJson.name.startsWith(
+      "block-template-" // @todo use option from .changeset/config.json instead
+    )
+      ? release.packageJson.devDependencies?.[rel.name]
+      : undefined;
     const peerDependencyVersionRange =
       release.packageJson.peerDependencies?.[rel.name];
 
-    const versionRange = dependencyVersionRange || peerDependencyVersionRange;
+    const versionRange =
+      dependencyVersionRange ||
+      devDependencyVersionRange ||
+      peerDependencyVersionRange;
     return (
       versionRange &&
       shouldUpdateDependencyBasedOnConfig(
         { type: rel.type, version: rel.newVersion },
         {
           depVersionRange: versionRange,
-          depType: dependencyVersionRange ? "dependencies" : "peerDependencies",
+          depType: dependencyVersionRange
+            ? "dependencies"
+            : devDependencyVersionRange
+            ? "devDependencies"
+            : "peerDependencies",
         },
         {
           minReleaseType: updateInternalDependencies,
