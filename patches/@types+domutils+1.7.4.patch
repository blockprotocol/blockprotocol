diff --git a/node_modules/@types/domutils/index.d.ts b/node_modules/@types/domutils/index.d.ts
index 1bc2f5a..a895508 100755
--- a/node_modules/@types/domutils/index.d.ts
+++ b/node_modules/@types/domutils/index.d.ts
@@ -3,21 +3,20 @@
 // Definitions by: Johan Davidsson <https://github.com/johandavidson>
 // Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
 
-import { DomElement } from "domhandler";
 /***
  * Append an element after another
  *
  * @argument elem The element to append to
  * @argument next The element be added
  */
-export function append(elem: DomElement, next: DomElement): void;
+export function append(elem: any, next: any): void;
 /***
  * Append a child to an element
  *
  * @argument elem The element to append to
  * @argument child The element to be added as a child
  */
-export function appendChild(elem: DomElement, child: DomElement): void;
+export function appendChild(elem: any, child: any): void;
 /***
  * Compare the position of one node against another node in any other document.
  * The return value is a bitmask with the following values:
@@ -43,15 +42,15 @@ export function appendChild(elem: DomElement, child: DomElement): void;
  *        See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
  *        a description of these values.
  */
-export function compareDocumentPosition(nodeA: DomElement, nodeB: DomElement): number;
-export function existsOne(test: any, elems: DomElement[]): boolean;
-export function filter(test: any, element: DomElement, recurse: boolean, limit: number): DomElement[];
-export function find(test: any, elems: DomElement[], recurse: boolean, limit: number): DomElement[];
-export function findAll(test: any, rootElems: DomElement[]): DomElement[];
-export function findOne(test: any, elems: DomElement[]): DomElement;
-export function findOneChild(test: any, elems: DomElement[]): DomElement;
-export function getAttributeValue(elem: DomElement, name: string): string;
-export function getChildren(elem: DomElement): DomElement[];
+export function compareDocumentPosition(nodeA: any, nodeB: any): number;
+export function existsOne(test: any, elems: any[]): boolean;
+export function filter(test: any, element: any, recurse: boolean, limit: number): any[];
+export function find(test: any, elems: any[], recurse: boolean, limit: number): any[];
+export function findAll(test: any, rootElems: any[]): any[];
+export function findOne(test: any, elems: any[]): any;
+export function findOneChild(test: any, elems: any[]): any;
+export function getAttributeValue(elem: any, name: string): string;
+export function getChildren(elem: any): any[];
 /***
  * Legacy
  */
@@ -68,49 +67,49 @@ export function getElementsByTagName(name: any, element: any, recurse?: any, lim
  * Legacy
  */
 export function getElementsByTagType(type: any, element: any, recurse?: any, limit?: any): any;
-export function getInnerHTML(elem: DomElement, opts: any): string;
+export function getInnerHTML(elem: any, opts: any): string;
 /***
  * Returns the name property of an element
  *
  * @argument elem The element to get the name for
  */
-export function getName(elem: DomElement): string;
+export function getName(elem: any): string;
 /***
- * Returns a string representing the array of DomElements
+ * Returns a string representing the array of anys
  *
- * @argument dom An array of DomElement that should be stringified
+ * @argument dom An array of any that should be stringified
  * @argument [opts] Optional options object
  */
-export function getOuterHTML(dom: DomElement[], opts?: { decodeEntities?: boolean | undefined, xmlMode?: boolean | undefined}): string;
-export function getParent(elem: DomElement): DomElement;
-export function getSiblings(elem: DomElement): DomElement[];
-export function getText(elem: DomElement): string;
-export function hasAttrib(elem: DomElement, name: string): boolean;
-export function isTag(elem: DomElement): boolean;
+export function getOuterHTML(dom: any[], opts?: { decodeEntities?: boolean | undefined, xmlMode?: boolean | undefined}): string;
+export function getParent(elem: any): any;
+export function getSiblings(elem: any): any[];
+export function getText(elem: any): string;
+export function hasAttrib(elem: any, name: string): boolean;
+export function isTag(elem: any): boolean;
 /***
  * Prepend an element before another
  *
  * @argument elem The element to append to
  * @argument prev The element be added
  */
-export function prepend(elem: DomElement, prev: DomElement): void;
+export function prepend(elem: any, prev: any): void;
 /***
  * Remove an element from the dom
  *
  * @argument elem The element to be removed
  */
-export function removeElement(elem: DomElement): void;
+export function removeElement(elem: any): void;
 /***
  * Given an array of nodes, remove any member that is contained by another.
  */
-export function removeSubsets(nodes: DomElement[]): DomElement[];
+export function removeSubsets(nodes: any[]): any[];
 /***
  * Replace an element in the dom
  *
  * @argument elem The element to be replaced
  * @argument replacement The element to be added
  */
-export function replaceElement(elem: DomElement, replacement: DomElement): void;
+export function replaceElement(elem: any, replacement: any): void;
 /***
  * Legacy
  */
@@ -123,4 +122,4 @@ export function testElement(options: any, element: any): any;
  * @argument nodes Array of DOM nodes
  * @returns collection of unique nodes, sorted in document order
  */
-export function uniqueSort(nodes: DomElement[]): DomElement[];
+export function uniqueSort(nodes: any[]): any[];
