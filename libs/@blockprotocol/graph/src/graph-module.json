{
  "name": "graph",
  "version": "0.2",
  "coreVersion": "0.2",
  "messages": [
    {
      "messageName": "createEntity",
      "description": "Request to create an entity",
      "source": "block",
      "respondedToBy": "createEntityResponse",
      "sentOnInitialization": false,
      "data": {
        "type": "object",
        "properties": {
          "entityTypeId": {
            "description": "The entityTypeId of the type of the entity to create",
            "$ref": "https://blockprotocol.org/types/modules/graph/0.3/schema/versioned-url"
          },
          "properties": {
            "description": "The properties of the entity to create",
            "$ref": "https://blockprotocol.org/types/modules/graph/0.3/schema/property-type-object"
          },
          "linkData": {
            "description": "Links to create along with the entity",
            "$ref": "https://blockprotocol.org/types/modules/graph/0.3/schema/link-data"
          }
        },
        "required": [
          "entityTypeId",
          "properties"
        ],
        "additionalProperties": false
      },
      "errorCodes": []
    },
    {
      "messageName": "createEntityResponse",
      "description": "The response to a request to create an entity",
      "source": "embedder",
      "respondedToBy": null,
      "sentOnInitialization": false,
      "data": {
        "$ref": "https://blockprotocol.org/types/modules/graph/0.3/schema/entity"
      },
      "errorCodes": ["FORBIDDEN", "INVALID_INPUT"]
    },
    {
      "messageName": "updateEntity",
      "description": "Request to update an entity, with the properties to update",
      "source": "block",
      "respondedToBy": "updateEntityResponse",
      "sentOnInitialization": false,
      "data": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "entityId": {
                "description": "The entityId of the entity to update",
                "$ref": "https://blockprotocol.org/types/modules/graph/0.3/schema/entity-id"
              },
              "entityTypeId": {
                "description": "The entityTypeId of the type of the entity to update",
                "$ref": "https://blockprotocol.org/types/modules/graph/0.3/schema/versioned-url"
              },
              "properties": {
                "description": "The properties of the entity to update",
                "$ref": "https://blockprotocol.org/types/modules/graph/0.3/schema/property-type-object"
              }
            }
          },
          {
            "$ref": "https://blockprotocol.org/types/modules/graph/0.3/schema/partial-link-data"
          }
        ],
        "required": [
          "entityId",
          "entityTypeId",
          "properties"
        ],
        "additionalProperties": false
      },
      "errorCodes": []
    },
    {
      "messageName": "updateEntityResponse",
      "description": "The response to a request to update an entity",
      "source": "embedder",
      "respondedToBy": null,
      "sentOnInitialization": false,
      "data": {
        "$ref": "https://blockprotocol.org/types/modules/graph/0.3/schema/entity"
      },
      "errorCodes": ["FORBIDDEN", "INVALID_INPUT", "NOT_FOUND"]
    },
    {
      "messageName": "deleteEntity",
      "description": "Request to delete an entity, expecting 'true' in response if the operation succeeds.",
      "source": "block",
      "respondedToBy": "deleteEntityResponse",
      "sentOnInitialization": false,
      "data": {
        "description": "The entityId of the entity to delete",
        "$ref": "https://blockprotocol.org/types/modules/graph/0.3/schema/entity-id"
      },
      "errorCodes": []
    },
    {
      "messageName": "deleteEntityResponse",
      "description": "The response to a request to delete an entity",
      "source": "embedder",
      "respondedToBy": null,
      "sentOnInitialization": false,
      "data": {
        "description": "'true' if the operation succeeded. Otherwise, errors should be returned.",
        "type": "boolean",
        "const": true
      },
      "errorCodes": ["FORBIDDEN", "INVALID_INPUT", "NOT_FOUND"]
    },
    {
      "messageName": "getEntity",
      "description": "Request to retrieve an entity, expecting the entity in response.",
      "source": "block",
      "respondedToBy": "getEntityResponse",
      "sentOnInitialization": false,
      "data": {
        "type": "object",
        "properties": {
          "entityId": {
            "description": "The entityId of the entity to retrieve",
            "$ref": "https://blockprotocol.org/types/modules/graph/0.3/schema/entity-id"
          },
          "graphResolveDepths": {
            "$ref": "https://blockprotocol.org/types/modules/graph/0.3/schema/partial-graph-resolve-depths"
          }
        },
        "required": ["entityId"],
        "additionalProperties": false
      },
      "errorCodes": []
    },
    {
      "messageName": "getEntityResponse",
      "description": "The response to a request to get an entity",
      "source": "embedder",
      "respondedToBy": null,
      "sentOnInitialization": false,
      "data": {
        "$ref": "https://blockprotocol.org/types/modules/graph/0.3/schema/subgraph"
      },
      "errorCodes": ["FORBIDDEN", "INVALID_INPUT", "NOT_FOUND"]
    },
    {
      "messageName": "aggregateEntities",
      "description": "Request to retrieve an aggregation of entities.",
      "source": "block",
      "respondedToBy": "aggregateEntitiesResponse",
      "sentOnInitialization": false,
      "data": {
        "description": "The aggregation operation to apply",
        "$ref": "https://blockprotocol.org/types/modules/graph/0.3/schema/aggregation-operation"
      },
      "errorCodes": []
    },
    {
      "messageName": "aggregateEntitiesResponse",
      "description": "The response to a request to retrieve an aggregation of entities",
      "source": "embedder",
      "respondedToBy": null,
      "sentOnInitialization": false,
      "data": {
        "$ref": "https://blockprotocol.org/types/modules/graph/0.3/schema/subgraph"
      },
      "errorCodes": ["FORBIDDEN", "INVALID_INPUT"]
    },
    {
      "messageName": "uploadFile",
      "description": "Request to upload a file and create an entity to store metadata about it.",
      "source": "block",
      "respondedToBy": "uploadFileResponse",
      "sentOnInitialization": false,
      "data": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "url"
        ],
        "additionalProperties": false
      },
      "errorCodes": []
    },
    {
      "messageName": "uploadFileResponse",
      "description": "The response to a request to create an entity storing metadata about an uploaded file.",
      "source": "embedder",
      "respondedToBy": null,
      "sentOnInitialization": false,
      "data": {
        "type": "object",
        "properties": {
          "entityId": {
            "description": "The entityId of the entity storing metadata about the file."
          },
          "url": {
            "description": "The URL the file is now being served from.",
            "type": "string"
          },
          "mediaType": {
            "description": "The type of media file this is",
            "type": "string",
            "enum": ["image", "video"]
          }
        },
        "required": ["entityId", "mediaType", "url"]
      },
      "errorCodes": ["FORBIDDEN", "INVALID_INPUT", "NOT_FOUND"]
    },
    {
      "messageName": "blockEntity",
      "description": "The entity associated with the block",
      "source": "embedder",
      "respondedToBy": null,
      "sentOnInitialization": true,
      "data": {
        "$ref": "https://blockprotocol.org/types/modules/graph/entity"
      },
      "errorCodes": []
    },
    {
      "messageName": "blockGraph",
      "description": "A graph of entities with the block entity at the root, resolved to the specified depth.",
      "source": "embedder",
      "respondedToBy": null,
      "sentOnInitialization": true,
      "data": {
        "type": "object",
        "properties": {
          "linkedEntities": {
            "description": "The entities linked from the block entity, and potentially entities linked from them, and so on, depending on depth.",
            "type": "array",
            "items": {
              "$ref": "https://blockprotocol.org/types/modules/graph/entity"
            }
          },
          "linkGroups": {
            "description": "The links attached to the block or the entities provided in linkedEntities, grouped by entity and path.",
            "type": "array",
            "items": {
              "$ref": "https://blockprotocol.org/types/modules/graph/link-group"
            }
          },
          "depth": {
            "description": "The number of links that will be followed from the block when resolving the graph.",
            "type": "integer",
            "inclusiveMinimum": 0
          }
        },
        "required": ["linkedEntities", "linkGroups", "depth"]
      },
      "errorCodes": []
    },
    {
      "messageName": "entityTypes",
      "description": "The entity types for any entities provided to the block as part of other messages.",
      "source": "embedder",
      "respondedToBy": null,
      "sentOnInitialization": true,
      "data": {
        "type": "array",
        "items": {
          "$ref": "https://blockprotocol.org/types/modules/graph/entity-type"
        }
      },
      "errorCodes": []
    },
    {
      "messageName": "linkedAggregations",
      "description": "Aggregations which are linked to from the block entity.",
      "source": "embedder",
      "respondedToBy": null,
      "sentOnInitialization": true,
      "data": {
        "type": "array",
        "items": {
          "$ref": "https://blockprotocol.org/types/modules/graph/linked-aggregation-definition"
        }
      },
      "errorCodes": []
    },
    {
      "messageName": "readonly",
      "description": "Indicates if the block should display in 'readonly' mode, i.e. without editing controls.",
      "source": "embedder",
      "respondedToBy": null,
      "sentOnInitialization": true,
      "data": {
        "type": "boolean"
      },
      "errorCodes": []
    }
  ]
}
