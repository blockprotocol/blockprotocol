/* tslint:disable */
/* eslint-disable */
/**
 * HASH Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface CreateSubscription200Response
 */
export interface CreateSubscription200Response {
  /**
   *
   * @type {string}
   * @memberof CreateSubscription200Response
   */
  subscriptionId: string;
  /**
   *
   * @type {string}
   * @memberof CreateSubscription200Response
   */
  clientSecret: string;
}
/**
 *
 * @export
 * @interface CreateSubscriptionRequest
 */
export interface CreateSubscriptionRequest {
  /**
   *
   * @type {string}
   * @memberof CreateSubscriptionRequest
   */
  subscriptionTier: CreateSubscriptionRequestSubscriptionTierEnum;
}

export const CreateSubscriptionRequestSubscriptionTierEnum = {
  Hobby: "hobby",
  Pro: "pro",
} as const;

export type CreateSubscriptionRequestSubscriptionTierEnum =
  (typeof CreateSubscriptionRequestSubscriptionTierEnum)[keyof typeof CreateSubscriptionRequestSubscriptionTierEnum];

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Create a subscription
     * @param {CreateSubscriptionRequest} createSubscriptionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscription: async (
      createSubscriptionRequest: CreateSubscriptionRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createSubscriptionRequest' is not null or undefined
      assertParamExists(
        "createSubscription",
        "createSubscriptionRequest",
        createSubscriptionRequest,
      );
      const localVarPath = `/create-subscription`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createSubscriptionRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create a subscription
     * @param {CreateSubscriptionRequest} createSubscriptionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createSubscription(
      createSubscriptionRequest: CreateSubscriptionRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateSubscription200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createSubscription(
          createSubscriptionRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary Create a subscription
     * @param {CreateSubscriptionRequest} createSubscriptionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscription(
      createSubscriptionRequest: CreateSubscriptionRequest,
      options?: any,
    ): AxiosPromise<CreateSubscription200Response> {
      return localVarFp
        .createSubscription(createSubscriptionRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
  /**
   *
   * @summary Create a subscription
   * @param {CreateSubscriptionRequest} createSubscriptionRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  createSubscription(
    createSubscriptionRequest: CreateSubscriptionRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<CreateSubscription200Response>;
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
  /**
   *
   * @summary Create a subscription
   * @param {CreateSubscriptionRequest} createSubscriptionRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createSubscription(
    createSubscriptionRequest: CreateSubscriptionRequest,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .createSubscription(createSubscriptionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
