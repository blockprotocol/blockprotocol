[config]
default_to_workspace = false

[config.modify_core_tasks]
private = true
namespace = "default"

[env]
CARGO_BUILD_FLAGS = "--workspace"

CARGO_RUN_FLAGS = ""

CARGO_FORMAT_HACK_FLAGS = "--workspace"
CARGO_FORMAT_FLAGS = ""

CARGO_CLIPPY_HACK_FLAGS = "--workspace --feature-powerset"
CARGO_CLIPPY_FLAGS = "--no-deps --tests"

CARGO_DOC_HACK_FLAGS = "--workspace"
CARGO_DOC_FLAGS = "--no-deps --all-features -Zunstable-options -Zrustdoc-scrape-examples=examples"

CARGO_RUSTDOC_HACK_FLAGS = "--workspace"
CARGO_RUSTDOC_FLAGS = "--all-features -Zunstable-options -Zrustdoc-scrape-examples=examples -- -Zunstable-options"

CARGO_TEST_HACK_FLAGS = "--workspace --feature-powerset"
CARGO_TEST_FLAGS = ""

CARGO_DOC_TEST_FLAGS = "--workspace --all-features"

[env.production]
CARGO_MAKE_CARGO_PROFILE = "release"

################################################################################
## General                                                                    ##
################################################################################

[tasks.all]
description = "Builds the project, checks lints, and runs the tests."
run_task = { name = ["build", "lint", "test"] }

[tasks.cargo]
private = true
command = "cargo"
dependencies = ["install-cargo-hack"]

[tasks.yarn]
private = true
command = "yarn"

[tasks.wasm-pack]
private = true
command = "wasm-pack"
dependencies = ["install-wasm-pack"]

################################################################################
## Build                                                                      ##
################################################################################

[tasks.build]
category = "Build"
description = "Builds the packages"
run_task = { name = ["cargo-build-task", "wasm-pack-build-task"] }

[tasks.cargo-build-task]
extend = "cargo"
args = ["build", "--profile", "${CARGO_MAKE_CARGO_PROFILE}", "@@split(CARGO_BUILD_FLAGS, )", "${@}"]

# TODO: add profile
# TODO: modify package.json to add additional fields
[tasks.wasm-pack-build-task]
extend = "wasm-pack"
args = ["build", "--target", "bundler", "--out-dir", "../ts/type-system", "--out-name", "index", "--scope", "blockprotocol", "${@}"]

################################################################################
## Lints                                                                      ##
################################################################################

[tasks.lint]
category = "Lint"
description = "Runs all lints"
run_task = { name = ["format", "clippy", "doc"] }

[tasks.format]
category = "Lint"
description = "Runs the rustfmt formatter"
run_task = { name = ["format-task"] }

[tasks.format-task]
extend = "cargo"
args = ["hack", "@@split(CARGO_FORMAT_HACK_FLAGS, )", "fmt", "@@split(CARGO_FORMAT_FLAGS, )", "${@}"]
dependencies = ["install-rustfmt"]

[tasks.clippy]
description = "Runs clippy with all feature flag permutations"
category = "Lint"
run_task = { name = ["clippy-task"] }

[tasks.clippy-task]
extend = "cargo"
args = ["hack", "@@split(CARGO_CLIPPY_HACK_FLAGS, )", "clippy", "--profile", "${CARGO_MAKE_CARGO_PROFILE}", "@@split(CARGO_CLIPPY_FLAGS, )", "${@}"]
dependencies = ["install-clippy"]

################################################################################
## Docs                                                                       ##
################################################################################

[tasks.doc]
category = "Docs"
description = "Builds the documentation for the crate"
run_task = { name = ["doc-task"] }

[tasks.doc-task]
extend = "cargo"
args = ["hack", "@@split(CARGO_DOC_HACK_FLAGS, )", "doc", "--profile", "${CARGO_MAKE_CARGO_PROFILE}", "@@split(CARGO_DOC_FLAGS, )", "${@}"]

[tasks.rustdoc]
category = "Docs"
description = "Builds the documentation for the crate"
run_task = { name = ["rustdoc-task"] }

[tasks.rustdoc-task]
extend = "cargo"
args = ["hack", "@@split(CARGO_RUSTDOC_HACK_FLAGS, )", "rustdoc", "--profile", "${CARGO_MAKE_CARGO_PROFILE}", "@@split(CARGO_RUSTDOC_FLAGS, )", "${@}"]

################################################################################
## Tests                                                                      ##
################################################################################

[tasks.test]
category = "Test"
description = "Runs the test suite"
run_task = { name = ["test-task"] }

[tasks.test-task]
private = true
run_task = { name = ["test-task-lib", "test-task-doc"]}

[tasks.test-task-lib]
extend = "cargo"
args = ["hack", "@@split(CARGO_TEST_HACK_FLAGS, )", "nextest", "run", "--cargo-profile", "${CARGO_MAKE_CARGO_PROFILE}", "@@split(CARGO_TEST_FLAGS, )", "${@}"]
dependencies = ["install-cargo-nextest"]

[tasks.test-task-doc]
extend = "cargo"
args = ["test", "--profile", "${CARGO_MAKE_CARGO_PROFILE}", "@@split(CARGO_DOC_TEST_FLAGS, )", "--doc", "${@}"]

################################################################################
## Run                                                                        ##
################################################################################

[tasks.run]
category = "Run"
description = "Builds the binary and runs it"
run_task = { name = "run-task" }

[tasks.run-task]
extend = "cargo"
args = ["run", "--profile", "${CARGO_MAKE_CARGO_PROFILE}", "@@split(CARGO_RUN_FLAGS, )", "${@}"]

################################################################################
## Tool Installs                                                              ##
################################################################################
[tasks.install-clippy]
private = true
install_crate = { rustup_component_name = "clippy" }

[tasks.install-rustfmt]
private = true
install_crate = { rustup_component_name = "rustfmt" }

[tasks.install-cargo-hack]
private = true
install_crate = { crate_name = "cargo-hack", version = "0.5.15", binary = "cargo", test_arg = ["hack", "--version"] }

[tasks.install-cargo-nextest]
private = true
install_crate = { crate_name = "cargo-nextest", version = "0.9.28", binary = "cargo", test_arg = ["nextest", "--version"] }

[tasks.install-wasm-pack]
private = true
install_crate = { crate_name = "wasm-pack", version = "0.10.3", binary = "wasm-pack", test_arg = ["--version"] }